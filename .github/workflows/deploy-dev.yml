name: deploy-dev
on: 
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
jobs:
  
  api-tests:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
 
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci

    # run the npm build command (not used in our project)
    - run: npm run build --if-present

      # install newman globally so we can run
      # postman collections
    - run: npm install -g newman
      # install pm2 so we can run our node.js
      # based backend without blocking the terminal
    - run: npm install -g pm2
      # copy db-template to real db
    - run: cp database/products-template.db database/products.db
      # start up our backend
    - run: pm2 start backend/index.js
      # run our api tests
    - run: newman run test-rest-api/test.postman_collection.json

  

  jest-tests:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
 
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
      # build our react project to the dist folder
    - run: npm run build --if-present
      # install pm2 so we can run our node.js
      # based backend without blocking the terminal
    - run: npm install -g pm2
      # copy db-template to real db
      #- run: cp database/products-template.db database/products.db
      # start up our backend because the methods
      # we are unit testing calls the backend
    - run: pm2 start backend/index.js
      # run the unit tests
    - run: npm run test
  
  
  deploy:
    name: "Deploy dev to dev"
    needs: [api-tests, jest-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/dev.key
          chmod 600 ~/.ssh/dev.key
          cat >>~/.ssh/config <<END
          Host dev
            HostName $SSH_HOST
            User $SSH_USER
            Port $SSH_PORT
            IdentityFile ~/.ssh/dev.key
            StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}          

      - name: copying template database to show the products
        run: ssh dev 'cd dev/ && cp ./database/products-template.db ./database/products.db'

      - name: Deploy from dev 
        # Here 'ssh dev' is like run command which will be the same for every branch 
        # 'cd dev' here dev is the folder we make in the server (aws-terminal)
        run: ssh dev 'cd dev/ && git fetch && git pull origin dev && npm install'

      - name: Restart app (Important read how to link pm2 for sudoers https://stackoverflow.com/questions/62863080/github-actions-err-bash-line-3-npm-command-not-found )
        # Here 'dev' is the name of the app running by pm2
        run: ssh dev 'pm2 restart dev'        
